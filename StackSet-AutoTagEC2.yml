---
AWSTemplateFormatVersion: '2010-09-09'
Description: AutoTag all crated EC2 instances with the name of the account as an OWNER.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "AWS Lambda parameters"
        Parameters:
          - LambdaTimeout
          - LambdaMemory
Parameters:
  LambdaTimeout:
    Type: Number
    Default: '120'
    Description: Enter a timeout value in seconds for the lambda function. Min is 3, max is 300 and default is 120.
  LambdaMemory:
    Type: Number
    Default: '128'
    Description: Enter the amount of memory alocated for the lambda function. Default is 128.
Resources:
  EventsRule:
    Type: AWS::Events::Rule
    DependsOn: EC2TaggingLambda
    Properties:
      Description: Events rule for monitoring new EC2 creation.
      EventPattern:
        source:
        - aws.ec2
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - RunInstances
      Name:
        Fn::Sub: "${AWS::StackName}-EC2TaggingRule"
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - EC2TaggingLambda
          - Arn
        Id:
          Ref: AWS::StackName
  EC2TaggingLambda:
    Type: AWS::Lambda::Function
    DependsOn: MGMTEC2TagRole
    Properties:
      Code:
        ZipFile: |
          import boto3

          ec2 = boto3.client('ec2')

          def lambda_handler(event, context):

              userType = event['detail']['userIdentity']['type']

              if userType == 'IAMUser':
                  user = event['detail']['userIdentity']['userName']
              elif userType == 'Root':
                  user = "Root"
              elif userType == 'AssumedRole':
                  user = event['detail']['userIdentity']['principalId']
                  user = user.split(':',1)[1]
              else:
                  user = 'N/A'

              items = event['detail']['responseElements']['instancesSet']['items']

              for item in items:
                  instanceId = item['instanceId']

                  ec2.create_tags(
                      Resources=[instanceId],
                      Tags=[{
                          'Key': 'OWNER',
                          'Value': user
                      }]
                  )

                  print 'Tagging instance = ' + instanceId + ", with Creator tag (" + user + ")"

              return 'OK'

      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - MGMTEC2TagRole
        - Arn
      Runtime: python2.7
      Timeout:
        Ref: LambdaTimeout
      MemorySize:
        Ref: LambdaMemory
  MGMTEC2TagRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      RoleName:
        Fn::Sub: "${AWS::StackName}-MGMTEC2TagPol"
  MGMTEC2TagPol:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: LogStreamAccess
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Resource:
          - arn:aws:logs:*:*:*
        - Sid: EC2TaggingAllow
          Effect: Allow
          Action:
          - ec2:CreateTags
          Resource:
          - arn:aws:ec2:*:*:*
      PolicyName:
        Fn::Sub: "${AWS::StackName}-MGMTEC2TagPol"
      Roles:
      - Ref: MGMTEC2TagRole
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EC2TaggingLambda
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - EventsRule
        - Arn
Outputs:
  EventsRule:
    Value:
      Ref: EventsRule
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-EC2TaggingMonitorRule"
    Description: Event Rule ID.
  LambdaFuncName:
    Value:
      Ref: EC2TaggingLambda
    Export:
      Name:
        Fn::Sub: "${AWS::StackName}-Ec2TaggingMonitorLambda"
    Description: Lambda function logical ID.
